/*--------------------------------------------------------------------------------*
  Copyright Nintendo.  All rights reserved.

  These coded instructions, statements, and computer programs contain proprietary
  information of Nintendo and/or its licensed developers and are protected by
  national and international copyright laws. They may not be disclosed to third
  parties or copied or duplicated in any form, in whole or in part, without the
  prior written consent of Nintendo.

  The content herein is highly confidential and should be handled accordingly.
 *--------------------------------------------------------------------------------*/

#pragma once

#include <nn/nn_Macro.h>
#include <nn/hid.h>
#include <nn/hid/hid_Npad.h>
#if defined(NN_BUILD_TARGET_PLATFORM_NX)
#include <nn/hid/hid_NpadJoy.h>
#endif
#include <nn/hid/hid_Vibration.h>


namespace nns { namespace hid {


// A class that denotes processes common to all operation styles.
class NpadController
{
    NN_DISALLOW_COPY(NpadController);
    NN_DISALLOW_MOVE(NpadController);

public:
    // The structure that represents the state of the vibration motor.
    struct VibrationState
    {
        nn::hid::VibrationDeviceHandle deviceHandle;    //!<  The handle of the vibration motor.
        nn::hid::VibrationDeviceInfo deviceInfo;        //!<  Device information for the vibration motor.
        int vibrationPatternId;                         //!<  Vibration pattern index.
        nn::hid::VibrationValue currentVibrationValue;  //!<  The vibration value set in the vibration motor.
        nn::hid::VibrationValue actualVibrationValue;   //!<  The vibration value actually generated by the vibration motor.
    };

public:
    NpadController(nn::hid::NpadIdType npadId, const char* name) NN_NOEXCEPT
        : m_NpadId(npadId)
        , m_Name(name)
        , m_IsConnected(false)
        , m_VibrationDeviceCount()
        , m_LoopCount()
        , m_VibrationStateArray()
        , m_Style(nn::hid::NpadStyleFullKey::Mask)
    {
        ResetButton();
    }

    virtual ~NpadController() NN_NOEXCEPT {}

    // Initialization called before the main loop.
    void Initialize() NN_NOEXCEPT;

    // Update processing called just once per frame.
    void Update() NN_NOEXCEPT;

    // Return true when you need to exit the main loop.
    bool IsQuitRequired() const NN_NOEXCEPT;

    // Return the connection style of the controller.
    nn::hid::NpadStyleSet GetStyleSet() const NN_NOEXCEPT
    {
        return nn::hid::GetNpadStyleSet(m_NpadId);
    }

    // Get the name used for display.
    const char* GetName() const NN_NOEXCEPT
    {
        return m_Name;
    }

    nn::hid::NpadIdType GetNpadId() const NN_NOEXCEPT
    {
        return m_NpadId;
    }

    // Get the number of vibration motors incorporated.
    int GetVibrationDeviceCount() const NN_NOEXCEPT
    {
        return m_VibrationDeviceCount;
    }

    // Get the vibration motor state.
    const VibrationState& GetVibrationState(int idx) const NN_NOEXCEPT
    {
        return m_VibrationStateArray[idx];
    }


    // Return true if a controller is connected.
    bool IsConnected() const NN_NOEXCEPT
    {
        return m_IsConnected;
    }

    // Get the current controller style name.
    const char* GetCurrentStyleName() const NN_NOEXCEPT;

    void ShootViberation() NN_NOEXCEPT;


private:
    void UpdateNpadState() NN_NOEXCEPT;
    void UpdateButton(const nn::hid::NpadButtonSet& buttons) NN_NOEXCEPT;
    void ResetButton() NN_NOEXCEPT;
    void UpdateVibrationPattern() NN_NOEXCEPT;
    void StopVibration() NN_NOEXCEPT;
    void UpdateVibrationValue() NN_NOEXCEPT;

private:
    static const int VibrationDeviceCountMax = 2;
    const nn::hid::NpadIdType m_NpadId;
    const char* const m_Name;
    nn::hid::NpadButtonSet m_Buttons;
    bool m_IsConnected;
    int m_VibrationDeviceCount;
    uint32_t m_LoopCount;
    VibrationState m_VibrationStateArray[VibrationDeviceCountMax];
    nn::hid::NpadStyleSet m_Style;
};

}}
